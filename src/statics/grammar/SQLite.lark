// This file was automatically compiled from the W3C standard of SparQL grammar at 2021-04-07 20:48:55
%import common.WS -> WS_1617799735
%ignore WS_1617799735

WS: SINGLE_LINE_COMMENT | SPACES
SCOL: ";"
DOT: "."
OPEN_PAR: "("
CLOSE_PAR: ")"
COMMA: ","
ASSIGN: "="
STAR: "*"
PLUS: "+"
MINUS: "-"
TILDE: "~"
PIPE2: "||"
DIV: "/"
MOD: "%"
LT2: "<<"
GT2: ">>"
AMP: "&"
PIPE: "|"
LT: "<"
LT_EQ: "<="
GT: ">"
GT_EQ: ">="
EQ: "=="
NOT_EQ1: "!="
NOT_EQ2: "<>"
ABORT: CH_A CH_B CH_O CH_R CH_T
ACTION: CH_A CH_C CH_T CH_I CH_O CH_N
ADD: CH_A CH_D CH_D
AFTER: CH_A CH_F CH_T CH_E CH_R
ALL: CH_A CH_L CH_L
ALTER: CH_A CH_L CH_T CH_E CH_R
ANALYZE: CH_A CH_N CH_A CH_L CH_Y CH_Z CH_E
AND: CH_A CH_N CH_D
AS: CH_A CH_S
ASC: CH_A CH_S CH_C
ATTACH: CH_A CH_T CH_T CH_A CH_C CH_H
AUTOINCREMENT: CH_A CH_U CH_T CH_O CH_I CH_N CH_C CH_R CH_E CH_M CH_E CH_N CH_T
BEFORE: CH_B CH_E CH_F CH_O CH_R CH_E
BEGIN: CH_B CH_E CH_G CH_I CH_N
BETWEEN: CH_B CH_E CH_T CH_W CH_E CH_E CH_N
BY: CH_B CH_Y
CASCADE: CH_C CH_A CH_S CH_C CH_A CH_D CH_E
CASE: CH_C CH_A CH_S CH_E
CAST: CH_C CH_A CH_S CH_T
CHECK: CH_C CH_H CH_E CH_C CH_K
COLLATE: CH_C CH_O CH_L CH_L CH_A CH_T CH_E
COLUMN: CH_C CH_O CH_L CH_U CH_M CH_N
COMMIT: CH_C CH_O CH_M CH_M CH_I CH_T
CONFLICT: CH_C CH_O CH_N CH_F CH_L CH_I CH_C CH_T
CONSTRAINT: CH_C CH_O CH_N CH_S CH_T CH_R CH_A CH_I CH_N CH_T
CREATE: CH_C CH_R CH_E CH_A CH_T CH_E
CROSS: CH_C CH_R CH_O CH_S CH_S
CURRENT_DATE: CH_C CH_U CH_R CH_R CH_E CH_N CH_T "_" CH_D CH_A CH_T CH_E
CURRENT_TIME: CH_C CH_U CH_R CH_R CH_E CH_N CH_T "_" CH_T CH_I CH_M CH_E
CURRENT_TIMESTAMP: CH_C CH_U CH_R CH_R CH_E CH_N CH_T "_" CH_T CH_I CH_M CH_E CH_S CH_T CH_A CH_M CH_P
DATABASE: CH_D CH_A CH_T CH_A CH_B CH_A CH_S CH_E
DEFAULT: CH_D CH_E CH_F CH_A CH_U CH_L CH_T
DEFERRABLE: CH_D CH_E CH_F CH_E CH_R CH_R CH_A CH_B CH_L CH_E
DEFERRED: CH_D CH_E CH_F CH_E CH_R CH_R CH_E CH_D
DELETE: CH_D CH_E CH_L CH_E CH_T CH_E
DESC: CH_D CH_E CH_S CH_C
DETACH: CH_D CH_E CH_T CH_A CH_C CH_H
DISTINCT: CH_D CH_I CH_S CH_T CH_I CH_N CH_C CH_T
DROP: CH_D CH_R CH_O CH_P
EACH: CH_E CH_A CH_C CH_H
ELSE: CH_E CH_L CH_S CH_E
END: CH_E CH_N CH_D
ESCAPE: CH_E CH_S CH_C CH_A CH_P CH_E
EXCEPT: CH_E CH_X CH_C CH_E CH_P CH_T
EXCLUSIVE: CH_E CH_X CH_C CH_L CH_U CH_S CH_I CH_V CH_E
EXISTS: CH_E CH_X CH_I CH_S CH_T CH_S
EXPLAIN: CH_E CH_X CH_P CH_L CH_A CH_I CH_N
FAIL: CH_F CH_A CH_I CH_L
FOR: CH_F CH_O CH_R
FOREIGN: CH_F CH_O CH_R CH_E CH_I CH_G CH_N
FROM: CH_F CH_R CH_O CH_M
FULL: CH_F CH_U CH_L CH_L
GLOB: CH_G CH_L CH_O CH_B
GROUP: CH_G CH_R CH_O CH_U CH_P
HAVING: CH_H CH_A CH_V CH_I CH_N CH_G
IF: CH_I CH_F
IGNORE: CH_I CH_G CH_N CH_O CH_R CH_E
IMMEDIATE: CH_I CH_M CH_M CH_E CH_D CH_I CH_A CH_T CH_E
IN: CH_I CH_N
INDEX: CH_I CH_N CH_D CH_E CH_X
INDEXED: CH_I CH_N CH_D CH_E CH_X CH_E CH_D
INITIALLY: CH_I CH_N CH_I CH_T CH_I CH_A CH_L CH_L CH_Y
INNER: CH_I CH_N CH_N CH_E CH_R
INSERT: CH_I CH_N CH_S CH_E CH_R CH_T
INSTEAD: CH_I CH_N CH_S CH_T CH_E CH_A CH_D
INTERSECT: CH_I CH_N CH_T CH_E CH_R CH_S CH_E CH_C CH_T
INTO: CH_I CH_N CH_T CH_O
IS: CH_I CH_S
ISNULL: CH_I CH_S CH_N CH_U CH_L CH_L
JOIN: CH_J CH_O CH_I CH_N
KEY: CH_K CH_E CH_Y
LEFT: CH_L CH_E CH_F CH_T
LIKE: CH_L CH_I CH_K CH_E
LIMIT: CH_L CH_I CH_M CH_I CH_T
MATCH: CH_M CH_A CH_T CH_C CH_H
NATURAL: CH_N CH_A CH_T CH_U CH_R CH_A CH_L
NO: CH_N CH_O
NOT: CH_N CH_O CH_T
NOTNULL: CH_N CH_O CH_T CH_N CH_U CH_L CH_L
NULL_: CH_N CH_U CH_L CH_L
OF: CH_O CH_F
OFFSET: CH_O CH_F CH_F CH_S CH_E CH_T
ON: CH_O CH_N
OR: CH_O CH_R
ORDER: CH_O CH_R CH_D CH_E CH_R
OUTER: CH_O CH_U CH_T CH_E CH_R
PLAN: CH_P CH_L CH_A CH_N
PRAGMA: CH_P CH_R CH_A CH_G CH_M CH_A
PRIMARY: CH_P CH_R CH_I CH_M CH_A CH_R CH_Y
QUERY: CH_Q CH_U CH_E CH_R CH_Y
RAISE: CH_R CH_A CH_I CH_S CH_E
RECURSIVE: CH_R CH_E CH_C CH_U CH_R CH_S CH_I CH_V CH_E
REFERENCES: CH_R CH_E CH_F CH_E CH_R CH_E CH_N CH_C CH_E CH_S
REGEXP: CH_R CH_E CH_G CH_E CH_X CH_P
REINDEX: CH_R CH_E CH_I CH_N CH_D CH_E CH_X
RELEASE: CH_R CH_E CH_L CH_E CH_A CH_S CH_E
RENAME: CH_R CH_E CH_N CH_A CH_M CH_E
REPLACE: CH_R CH_E CH_P CH_L CH_A CH_C CH_E
RESTRICT: CH_R CH_E CH_S CH_T CH_R CH_I CH_C CH_T
RIGHT: CH_R CH_I CH_G CH_H CH_T
ROLLBACK: CH_R CH_O CH_L CH_L CH_B CH_A CH_C CH_K
ROW: CH_R CH_O CH_W
ROWS: CH_R CH_O CH_W CH_S
SAVEPOINT: CH_S CH_A CH_V CH_E CH_P CH_O CH_I CH_N CH_T
SELECT: CH_S CH_E CH_L CH_E CH_C CH_T
SET: CH_S CH_E CH_T
TABLE: CH_T CH_A CH_B CH_L CH_E
TEMP: CH_T CH_E CH_M CH_P
TEMPORARY: CH_T CH_E CH_M CH_P CH_O CH_R CH_A CH_R CH_Y
THEN: CH_T CH_H CH_E CH_N
TO: CH_T CH_O
TRANSACTION: CH_T CH_R CH_A CH_N CH_S CH_A CH_C CH_T CH_I CH_O CH_N
TRIGGER: CH_T CH_R CH_I CH_G CH_G CH_E CH_R
UNION: CH_U CH_N CH_I CH_O CH_N
UNIQUE: CH_U CH_N CH_I CH_Q CH_U CH_E
UPDATE: CH_U CH_P CH_D CH_A CH_T CH_E
USING: CH_U CH_S CH_I CH_N CH_G
VACUUM: CH_V CH_A CH_C CH_U CH_U CH_M
VALUES: CH_V CH_A CH_L CH_U CH_E CH_S
VIEW: CH_V CH_I CH_E CH_W
VIRTUAL: CH_V CH_I CH_R CH_T CH_U CH_A CH_L
WHEN: CH_W CH_H CH_E CH_N
WHERE: CH_W CH_H CH_E CH_R CH_E
WITH: CH_W CH_I CH_T CH_H
WITHOUT: CH_W CH_I CH_T CH_H CH_O CH_U CH_T
FIRST_VALUE: CH_F CH_I CH_R CH_S CH_T "_" CH_V CH_A CH_L CH_U CH_E
OVER: CH_O CH_V CH_E CH_R
PARTITION: CH_P CH_A CH_R CH_T CH_I CH_T CH_I CH_O CH_N
RANGE: CH_R CH_A CH_N CH_G CH_E
PRECEDING: CH_P CH_R CH_E CH_C CH_E CH_D CH_I CH_N CH_G
UNBOUNDED: CH_U CH_N CH_B CH_O CH_U CH_N CH_D CH_E CH_D
CURRENT: CH_C CH_U CH_R CH_R CH_E CH_N CH_T
FOLLOWING: CH_F CH_O CH_L CH_L CH_O CH_W CH_I CH_N CH_G
CUME_DIST: CH_C CH_U CH_M CH_E "_" CH_D CH_I CH_S CH_T
DENSE_RANK: CH_D CH_E CH_N CH_S CH_E "_" CH_R CH_A CH_N CH_K
LAG: CH_L CH_A CH_G
LAST_VALUE: CH_L CH_A CH_S CH_T "_" CH_V CH_A CH_L CH_U CH_E
LEAD: CH_L CH_E CH_A CH_D
NTH_VALUE: CH_N CH_T CH_H "_" CH_V CH_A CH_L CH_U CH_E
NTILE: CH_N CH_T CH_I CH_L CH_E
PERCENT_RANK: CH_P CH_E CH_R CH_C CH_E CH_N CH_T "_" CH_R CH_A CH_N CH_K
RANK: CH_R CH_A CH_N CH_K
ROW_NUMBER: CH_R CH_O CH_W "_" CH_N CH_U CH_M CH_B CH_E CH_R
GENERATED: CH_G CH_E CH_N CH_E CH_R CH_A CH_T CH_E CH_D
ALWAYS: CH_A CH_L CH_W CH_A CH_Y CH_S
STORED: CH_S CH_T CH_O CH_R CH_E CH_D
TRUE_: CH_T CH_R CH_U CH_E
FALSE_: CH_F CH_A CH_L CH_S CH_E
WINDOW: CH_W CH_I CH_N CH_D CH_O CH_W
NULLS: CH_N CH_U CH_L CH_L CH_S
FIRST: CH_F CH_I CH_R CH_S CH_T
LAST: CH_L CH_A CH_S CH_T
FILTER: CH_F CH_I CH_L CH_T CH_E CH_R
GROUPS: CH_G CH_R CH_O CH_U CH_P CH_S
EXCLUDE: CH_E CH_X CH_C CH_L CH_U CH_D CH_E
TIES: CH_T CH_I CH_E CH_S
OTHERS: CH_O CH_T CH_H CH_E CH_R CH_S
DO: CH_D CH_O
NOTHING: CH_N CH_O CH_T CH_H CH_I CH_N CH_G
IDENTIFIER: "\"" (/[^"]/ | "\"\"")* "\"" | "`" (/[^`]/ | "``")* "`" | "[" (/[^\x5D]/)* "]" | /[a-zA-Z_]/ (/[a-zA-Z_0-9]/)*
NUMERIC_LITERAL: ((DIGIT)+ ("." (DIGIT)*)? | "." (DIGIT)+) (CH_E (/[\-+]/)? (DIGIT)+)? | "0x" (HEX_DIGIT)+
BIND_PARAMETER: "?" (DIGIT)* | /[:@$]/ IDENTIFIER
STRING_LITERAL: "'" (/[^']/ | "''")* "'"
BLOB_LITERAL: CH_X STRING_LITERAL
SINGLE_LINE_COMMENT: "--" (/[^\x0d\x0a]/)* ("\x0D")? "\x0A"
SPACES: /[\u000B\x09\x0d\x0a]/
HEX_DIGIT: /[0-9a-fA-F]/
DIGIT: /[0-9]/
CH_A: /[aA]/
CH_B: /[bB]/
CH_C: /[cC]/
CH_D: /[dD]/
CH_E: /[eE]/
CH_F: /[fF]/
CH_G: /[gG]/
CH_H: /[hH]/
CH_I: /[iI]/
CH_J: /[jJ]/
CH_K: /[kK]/
CH_L: /[lL]/
CH_M: /[mM]/
CH_N: /[nN]/
CH_O: /[oO]/
CH_P: /[pP]/
CH_Q: /[qQ]/
CH_R: /[rR]/
CH_S: /[sS]/
CH_T: /[tT]/
CH_U: /[uU]/
CH_V: /[vV]/
CH_W: /[wW]/
CH_X: /[xX]/
CH_Y: /[yY]/
CH_Z: /[zZ]/
parse: ext_star_0
sql_stmt_list: (ext_plus_1)? sql_stmt ext_star_2 (ext_plus_1)?
sql_stmt: (EXPLAIN (QUERY PLAN)?)? (alter_table_stmt | analyze_stmt | attach_stmt | begin_stmt | commit_stmt | create_index_stmt | create_table_stmt | create_trigger_stmt | create_view_stmt | create_virtual_table_stmt | delete_stmt | delete_stmt_limited | detach_stmt | drop_stmt | insert_stmt | pragma_stmt | reindex_stmt | release_stmt | rollback_stmt | savepoint_stmt | select_stmt | update_stmt | update_stmt_limited | vacuum_stmt)
alter_table_stmt: ALTER TABLE (schema_name ".")? table_name (RENAME (TO new_table_name | (COLUMN)? column_name TO column_name) | ADD (COLUMN)? column_def)
analyze_stmt: ANALYZE (schema_name | (schema_name ".")? table_or_index_name)?
attach_stmt: ATTACH (DATABASE)? expr AS schema_name
begin_stmt: BEGIN (DEFERRED | IMMEDIATE | EXCLUSIVE)? (TRANSACTION (transaction_name)?)?
commit_stmt: (COMMIT | END) (TRANSACTION)?
rollback_stmt: ROLLBACK (TRANSACTION)? (TO (SAVEPOINT)? savepoint_name)?
savepoint_stmt: SAVEPOINT savepoint_name
release_stmt: RELEASE (SAVEPOINT)? savepoint_name
create_index_stmt: CREATE (UNIQUE)? INDEX (IF NOT EXISTS)? (schema_name ".")? index_name ON table_name "(" indexed_column ext_star_3 ")" (WHERE expr)?
indexed_column: (column_name | expr) (COLLATE collation_name)? (asc_desc)?
create_table_stmt: CREATE (TEMP | TEMPORARY)? TABLE (IF NOT EXISTS)? (schema_name ".")? table_name ("(" column_def ext_star_4 ext_star_5 ")" (WITHOUT IDENTIFIER)? | AS select_stmt)
column_def: column_name (type_name)? ext_star_6
type_name: ext_plus_7 ("(" signed_number ")" | "(" signed_number "," signed_number ")")?
column_constraint: (CONSTRAINT name)? (PRIMARY KEY (asc_desc)? (conflict_clause)? (AUTOINCREMENT)? | (NOT NULL_ | UNIQUE) (conflict_clause)? | CHECK "(" expr ")" | DEFAULT (signed_number | literal_value | "(" expr ")") | COLLATE collation_name | foreign_key_clause | (GENERATED ALWAYS)? AS "(" expr ")" (STORED | VIRTUAL)?)
signed_number: ("+" | "-")? NUMERIC_LITERAL
table_constraint: (CONSTRAINT name)? ((PRIMARY KEY | UNIQUE) "(" indexed_column ext_star_3 ")" (conflict_clause)? | CHECK "(" expr ")" | FOREIGN KEY "(" column_name ext_star_8 ")" foreign_key_clause)
foreign_key_clause: REFERENCES foreign_table ("(" column_name ext_star_8 ")")? ext_star_9 ((NOT)? DEFERRABLE (INITIALLY (DEFERRED | IMMEDIATE))?)?
conflict_clause: ON CONFLICT (ROLLBACK | ABORT | FAIL | IGNORE | REPLACE)
create_trigger_stmt: CREATE (TEMP | TEMPORARY)? TRIGGER (IF NOT EXISTS)? (schema_name ".")? trigger_name (BEFORE | AFTER | INSTEAD OF)? (DELETE | INSERT | UPDATE (OF column_name ext_star_8)?) ON table_name (FOR EACH ROW)? (WHEN expr)? BEGIN ext_plus_10 END
create_view_stmt: CREATE (TEMP | TEMPORARY)? VIEW (IF NOT EXISTS)? (schema_name ".")? view_name ("(" column_name ext_star_8 ")")? AS select_stmt
create_virtual_table_stmt: CREATE VIRTUAL TABLE (IF NOT EXISTS)? (schema_name ".")? table_name USING module_name ("(" module_argument ext_star_11 ")")?
with_clause: WITH (RECURSIVE)? cte_table_name AS "(" select_stmt ")" ext_star_12
cte_table_name: table_name ("(" column_name ext_star_8 ")")?
recursive_cte: cte_table_name AS "(" initial_select UNION (ALL)? recursive_select ")"
common_table_expression: table_name ("(" column_name ext_star_8 ")")? AS "(" select_stmt ")"
delete_stmt: (with_clause)? DELETE FROM qualified_table_name (WHERE expr)?
delete_stmt_limited: (with_clause)? DELETE FROM qualified_table_name (WHERE expr)? ((order_by_stmt)? limit_stmt)?
detach_stmt: DETACH (DATABASE)? schema_name
drop_stmt: DROP (INDEX | TABLE | TRIGGER | VIEW) (IF EXISTS)? (schema_name ".")? any_name
expr: literal_value | BIND_PARAMETER | ((schema_name ".")? table_name ".")? column_name | unary_operator expr | expr AND expr | expr OR expr | expr "||" expr | expr ("*" | "/" | "%") expr | expr ("+" | "-") expr | expr ("<<" | ">>" | "&" | "|") expr | expr ("<" | "<=" | ">" | ">=") expr | expr ("=" | "==" | "!=" | "<>" | IS | IS NOT | IN | LIKE | GLOB | MATCH | REGEXP) expr | function_name "(" ((DISTINCT)? expr ext_star_13 | "*")? ")" (filter_clause)? (over_clause)? | "(" expr ext_star_13 ")" | CAST "(" expr AS type_name ")" | expr COLLATE collation_name | expr (NOT)? (LIKE | GLOB | REGEXP | MATCH) expr (ESCAPE expr)? | expr (ISNULL | NOTNULL | NOT NULL_) | expr IS (NOT)? expr | expr (NOT)? BETWEEN expr AND expr | expr (NOT)? IN ("(" (select_stmt | expr ext_star_13)? ")" | (schema_name ".")? table_name | (schema_name ".")? table_function_name "(" (expr ext_star_13)? ")") | ((NOT)? EXISTS)? "(" select_stmt ")" | ALL "(" select_stmt ")" | CASE (expr)? ext_plus_14 (ELSE expr)? END | raise_function
raise_function: RAISE "(" (IGNORE | (ROLLBACK | ABORT | FAIL) "," error_message) ")"
literal_value: NUMERIC_LITERAL | STRING_LITERAL | BLOB_LITERAL | NULL_ | TRUE_ | FALSE_ | CURRENT_TIME | CURRENT_DATE | CURRENT_TIMESTAMP
insert_stmt: (with_clause)? (INSERT | REPLACE | INSERT OR (REPLACE | ROLLBACK | ABORT | FAIL | IGNORE)) INTO (schema_name ".")? table_name (AS table_alias)? ("(" column_name ext_star_8 ")")? (VALUES "(" expr ext_star_13 ")" ext_star_15 | select_stmt) (upsert_clause)? | DEFAULT VALUES
upsert_clause: ON CONFLICT ("(" indexed_column ext_star_3 ")" (WHERE expr)?)? DO (NOTHING | UPDATE SET (column_name | column_name_list) EQ expr ext_star_16 (WHERE expr)?)
pragma_stmt: PRAGMA (schema_name ".")? pragma_name ("=" pragma_value | "(" pragma_value ")")?
pragma_value: signed_number | name | STRING_LITERAL
reindex_stmt: REINDEX (collation_name | (schema_name ".")? (table_name | index_name))?
select_stmt: (common_table_stmt)? select_core ext_star_17 (order_by_stmt)? (limit_stmt)?
join_clause: table_or_subquery ext_star_18
select_core: SELECT (DISTINCT | ALL)? result_column ext_star_21 (FROM (table_or_subquery ext_star_19 | join_clause))? (WHERE expr)? (GROUP BY expr ext_star_13 (HAVING expr)?)? (WINDOW window_name AS window_defn ext_star_20)? | VALUES "(" expr ext_star_13 ")" ext_star_15
factored_select_stmt: select_stmt
simple_select_stmt: (common_table_stmt)? select_core (order_by_stmt)? (limit_stmt)?
compound_select_stmt: (common_table_stmt)? select_core ext_plus_22 (order_by_stmt)? (limit_stmt)?
table_or_subquery: (schema_name ".")? table_name ((AS)? table_alias)? (INDEXED BY index_name | NOT INDEXED)? | (schema_name ".")? table_function_name "(" expr ext_star_13 ")" ((AS)? table_alias)? | "(" (table_or_subquery ext_star_19 | join_clause) ")" | "(" select_stmt ")" ((AS)? table_alias)?
result_column: "*" | table_name "." "*" | expr ((AS)? column_alias)?
join_operator: "," | (NATURAL)? (LEFT (OUTER)? | INNER | CROSS)? JOIN
join_constraint: ON expr | USING "(" column_name ext_star_8 ")"
compound_operator: UNION (ALL)? | INTERSECT | EXCEPT
update_stmt: (with_clause)? UPDATE (OR (ROLLBACK | ABORT | REPLACE | FAIL | IGNORE))? qualified_table_name SET (column_name | column_name_list) "=" expr ext_star_23 (WHERE expr)?
column_name_list: "(" column_name ext_star_8 ")"
update_stmt_limited: (with_clause)? UPDATE (OR (ROLLBACK | ABORT | REPLACE | FAIL | IGNORE))? qualified_table_name SET (column_name | column_name_list) "=" expr ext_star_23 (WHERE expr)? ((order_by_stmt)? limit_stmt)?
qualified_table_name: (schema_name ".")? table_name (AS alias)? (INDEXED BY index_name | NOT INDEXED)?
vacuum_stmt: VACUUM (schema_name)? (INTO filename)?
filter_clause: FILTER "(" WHERE expr ")"
window_defn: "(" (base_window_name)? (PARTITION BY expr ext_star_13)? ORDER BY ordering_term ext_star_24 (frame_spec)? ")"
over_clause: OVER (window_name | "(" (base_window_name)? (PARTITION BY expr ext_star_13)? (ORDER BY ordering_term ext_star_24)? (frame_spec)? ")")
frame_spec: frame_clause (EXCLUDE NO OTHERS | CURRENT ROW | GROUP | TIES)?
frame_clause: (RANGE | ROWS | GROUPS) (frame_single | BETWEEN frame_left AND frame_right)
simple_function_invocation: simple_func "(" (expr ext_star_13 | "*") ")"
aggregate_function_invocation: aggregate_func "(" ((DISTINCT)? expr ext_star_13 | "*")? ")" (filter_clause)?
window_function_invocation: window_function "(" (expr ext_star_13 | "*")? ")" (filter_clause)? OVER (window_defn | window_name)
common_table_stmt: WITH (RECURSIVE)? common_table_expression ext_star_25
order_by_stmt: ORDER BY ordering_term ext_star_24
limit_stmt: LIMIT expr ((OFFSET | ",") expr)?
ordering_term: expr (COLLATE collation_name)? (asc_desc)? (NULLS (FIRST | LAST))?
asc_desc: ASC | DESC
frame_left: expr PRECEDING | expr FOLLOWING | CURRENT ROW | UNBOUNDED PRECEDING
frame_right: expr PRECEDING | expr FOLLOWING | CURRENT ROW | UNBOUNDED FOLLOWING
frame_single: expr PRECEDING | UNBOUNDED PRECEDING | CURRENT ROW
window_function: (FIRST_VALUE | LAST_VALUE) "(" expr ")" OVER "(" (partition_by)? order_by_expr_asc_desc (frame_clause)? ")" | (CUME_DIST | PERCENT_RANK) "(" ")" OVER "(" (partition_by)? (order_by_expr)? ")" | (DENSE_RANK | RANK | ROW_NUMBER) "(" ")" OVER "(" (partition_by)? order_by_expr_asc_desc ")" | (LAG | LEAD) "(" expr (offset)? (default_value)? ")" OVER "(" (partition_by)? order_by_expr_asc_desc ")" | NTH_VALUE "(" expr "," signed_number ")" OVER "(" (partition_by)? order_by_expr_asc_desc (frame_clause)? ")" | NTILE "(" expr ")" OVER "(" (partition_by)? order_by_expr_asc_desc ")"
offset: "," signed_number
default_value: "," signed_number
partition_by: PARTITION BY ext_plus_26
order_by_expr: ORDER BY ext_plus_26
order_by_expr_asc_desc: ORDER BY order_by_expr_asc_desc
expr_asc_desc: expr (asc_desc)? ext_star_27
initial_select: select_stmt
recursive_select: select_stmt
unary_operator: "-" | "+" | "~" | NOT
error_message: STRING_LITERAL
module_argument: expr | column_def
column_alias: IDENTIFIER | STRING_LITERAL
keyword: ABORT | ACTION | ADD | AFTER | ALL | ALTER | ANALYZE | AND | AS | ASC | ATTACH | AUTOINCREMENT | BEFORE | BEGIN | BETWEEN | BY | CASCADE | CASE | CAST | CHECK | COLLATE | COLUMN | COMMIT | CONFLICT | CONSTRAINT | CREATE | CROSS | CURRENT_DATE | CURRENT_TIME | CURRENT_TIMESTAMP | DATABASE | DEFAULT | DEFERRABLE | DEFERRED | DELETE | DESC | DETACH | DISTINCT | DROP | EACH | ELSE | END | ESCAPE | EXCEPT | EXCLUSIVE | EXISTS | EXPLAIN | FAIL | FOR | FOREIGN | FROM | FULL | GLOB | GROUP | HAVING | IF | IGNORE | IMMEDIATE | IN | INDEX | INDEXED | INITIALLY | INNER | INSERT | INSTEAD | INTERSECT | INTO | IS | ISNULL | JOIN | KEY | LEFT | LIKE | LIMIT | MATCH | NATURAL | NO | NOT | NOTNULL | NULL_ | OF | OFFSET | ON | OR | ORDER | OUTER | PLAN | PRAGMA | PRIMARY | QUERY | RAISE | RECURSIVE | REFERENCES | REGEXP | REINDEX | RELEASE | RENAME | REPLACE | RESTRICT | RIGHT | ROLLBACK | ROW | ROWS | SAVEPOINT | SELECT | SET | TABLE | TEMP | TEMPORARY | THEN | TO | TRANSACTION | TRIGGER | UNION | UNIQUE | UPDATE | USING | VACUUM | VALUES | VIEW | VIRTUAL | WHEN | WHERE | WITH | WITHOUT | FIRST_VALUE | OVER | PARTITION | RANGE | PRECEDING | UNBOUNDED | CURRENT | FOLLOWING | CUME_DIST | DENSE_RANK | LAG | LAST_VALUE | LEAD | NTH_VALUE | NTILE | PERCENT_RANK | RANK | ROW_NUMBER | GENERATED | ALWAYS | STORED | TRUE_ | FALSE_ | WINDOW | NULLS | FIRST | LAST | FILTER | GROUPS | EXCLUDE
name: any_name
function_name: any_name
schema_name: any_name
table_name: any_name
table_or_index_name: any_name
new_table_name: any_name
column_name: any_name
collation_name: any_name
foreign_table: any_name
index_name: any_name
trigger_name: any_name
view_name: any_name
module_name: any_name
pragma_name: any_name
savepoint_name: any_name
table_alias: any_name
transaction_name: any_name
window_name: any_name
alias: any_name
filename: any_name
base_window_name: any_name
simple_func: any_name
aggregate_func: any_name
table_function_name: any_name
any_name: IDENTIFIER | keyword | STRING_LITERAL | "(" any_name ")"
ext_star_0: ((sql_stmt_list) ext_star_0)?
ext_plus_1: (";") (ext_plus_1)?
ext_star_2: ((ext_plus_1 sql_stmt) ext_star_2)?
ext_star_3: (("," indexed_column) ext_star_3)?
ext_star_4: (("," column_def) ext_star_4)?
ext_star_5: (("," table_constraint) ext_star_5)?
ext_star_6: ((column_constraint) ext_star_6)?
ext_plus_7: (name) (ext_plus_7)?
ext_star_8: (("," column_name) ext_star_8)?
ext_star_9: ((ON (DELETE | UPDATE) (SET (NULL_ | DEFAULT) | CASCADE | RESTRICT | NO ACTION) | MATCH name) ext_star_9)?
ext_plus_10: ((update_stmt | insert_stmt | delete_stmt | select_stmt) ";") (ext_plus_10)?
ext_star_11: (("," module_argument) ext_star_11)?
ext_star_12: (("," cte_table_name AS "(" select_stmt ")") ext_star_12)?
ext_star_13: (("," expr) ext_star_13)?
ext_plus_14: (WHEN expr THEN expr) (ext_plus_14)?
ext_star_15: (("," "(" expr ext_star_13 ")") ext_star_15)?
ext_star_16: (("," (column_name | column_name_list) EQ expr) ext_star_16)?
ext_star_17: ((compound_operator select_core) ext_star_17)?
ext_star_18: ((join_operator table_or_subquery (join_constraint)?) ext_star_18)?
ext_star_19: (("," table_or_subquery) ext_star_19)?
ext_star_20: (("," window_name AS window_defn) ext_star_20)?
ext_star_21: (("," result_column) ext_star_21)?
ext_plus_22: ((UNION (ALL)? | INTERSECT | EXCEPT) select_core) (ext_plus_22)?
ext_star_23: (("," (column_name | column_name_list) "=" expr) ext_star_23)?
ext_star_24: (("," ordering_term) ext_star_24)?
ext_star_25: (("," common_table_expression) ext_star_25)?
ext_plus_26: (expr) (ext_plus_26)?
ext_star_27: (("," expr (asc_desc)?) ext_star_27)?

%ignore WS

